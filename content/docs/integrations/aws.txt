---
title: AWS Elastic Load Balancers (ELB)
weight: 5
description:
---

{{< reuse "docs/snippets/product-name-caps.md" >}} can act as both a secure edge router and as a developer-friendly Kubernetes ingress/egress (north-south traffic) gateway. You can get many benefits by pairing {{< reuse "docs/snippets/product-name.md" >}} with one of AWS Elastic Load Balancers (ELB), including better cross availability zone failover and deeper integration with AWS services like AWS Certificate Manager, AWS CLI & CloudFormation, and Route 53 (DNS).

AWS provides these three types of Elastic Load Balancers (ELB):

* **Classic Load Balancer (CLB)**: An old AWS load balancer that provides a mixture of TCP/UDP and HTTP capabilities. It predates some of the Virtual Private Cloud (VPC) infrastructure. Because of that, recommends new deployments to utilize on eof the other load balancer types.
* **Network Load Balancer (NLB)**: An optimized L4 TCP/UDP load balancer with very high throughput that can handle millions of requests per second while maintaining low latency. This load balancer also has deep integration with other AWS services like Route 53 (DNS).
* **Application Load Balancer (ALB)**: An L7 HTTP-only load balancer that is focused on providing HTTP request routing capabilities.
These load balancers support offloading TLS termination and some degree of cross-availability zone failover and support.

For more information, see the [AWS load balancer documentation](https://docs.aws.amazon.com/elasticloadbalancing/index.html).

## Set up the AWS Load Balancer Controller

The following steps show how to deploy the AWS Load Balancer Controller in your cluster. For more information about this installation, see the [AWS load balancer controller documentation](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.10/deploy/installation/).

1. Create an AWS IAM account
   ```sh
   export CLUSTER_NAME="my-cluster"
   export REGION="eu-central-1"
   export AWS_ACCOUNT_ID=XXXXXXXXXX
   export IAM_POLICY_NAME=AWSLoadBalancerControllerIAMPolicy
   export IAM_SA=aws-load-balancer-controller

   # Setup IAM OIDC provider for a cluster to enable IAM roles for pods
   eksctl utils associate-iam-oidc-provider \
       --region ${REGION} \
       --cluster ${CLUSTER_NAME} \
       --approve

   # Fetch the IAM policy required for our Service-Account
   # Download the appropriate IAM policy based on your region:

   # For US Gov Cloud regions:
   curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.10.0/docs/install/iam_policy_us-gov.json

   # For China regions:
   curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.10.0/docs/install/iam_policy_cn.json

   # For all other regions:
   curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.10.0/docs/install/iam_policy.json

   # Create the IAM policy
   aws iam create-policy \
       --policy-name ${IAM_POLICY_NAME} \
       --policy-document file://iam-policy.json

   # Create the k8s Service Account
   eksctl create iamserviceaccount \
   --cluster=${CLUSTER_NAME} \
   --namespace=kube-system \
   --name=${IAM_SA} \
   --attach-policy-arn=arn:aws:iam::${AWS_ACCOUNT_ID}:policy/${IAM_POLICY_NAME} \
   --override-existing-serviceaccounts \
   --approve \
   --region ${REGION}

   # Check out the new SA in your cluster for the AWS LB controller
   kubectl -n kube-system get sa aws-load-balancer-controller -o yaml
   ```
   
2. Deploy the AWS Load Balancer Controller.
   ```sh
   kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

   helm repo add eks https://aws.github.io/eks-charts
   helm repo update
   helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
     -n kube-system \
     --set clusterName=${CLUSTER_NAME} \
     --set serviceAccount.create=false \
     --set serviceAccount.name=${IAM_SA}
   ```

## Deploy the gateway 

1. Create a GatewayParameters resource that you later use to configure your gateway. The following example configuration uses the most common AWS annotations. You might want to add other annotations to your configuration. For more information, see the [AWS Load Balancer Controller documentation](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/service/annotations/). 
   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.gloo.solo.io/v1alpha1
   kind: GatewayParameters
   metadata:
     name: gwparams
     namespace: gloo-system
   spec:
     kube:
       service:
         type: LoadBalancer
         extraAnnotations:
           service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
           service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
           service.beta.kubernetes.io/aws-load-balancer-type: external
   EOF
   ```

2. Create a Gateway resource with the GatewayParameters configuration that you created. 
   ```yaml
   kubectl apply -f- <<EOF
   kind: Gateway
   apiVersion: gateway.networking.k8s.io/v1
   metadata:
     name: http-aws
     namespace: gloo-system
     annotations:
       gateway.gloo.solo.io/gateway-parameters-name: "gwparams"
   spec:
     gatewayClassName: gloo-gateway
     listeners:
     - protocol: HTTP
       port: 80
       name: http
       allowedRoutes:
         namespaces:
           from: All
   EOF  
   ```

